/*
 * =================================================================
 * ==                    DESIGN BLUEPRINT:                        ==
 * ==                      "AURORA GLASS"                         ==
 * =================================================================
 *
 *
 * --- CORE CONCEPT ---
 * "Aurora Glass" is a design system that blends minimalism with
 * vibrant, ethereal aesthetics. The core idea is to simulate
 * components made of frosted, fluid glass, through which a soft,
 * shifting aurora of colors is visible. This creates a look that
 * is clean, modern, and subtly dynamic.
 *
 * --- LAYOUT & SPACING ---
 * The layout is governed by a central column, using flexbox to
 * center content both vertically and horizontally. A consistent
 * spacing unit (`--spacing-unit`) ensures rhythmic and balanced
 * negative space, preventing visual clutter and guiding the user's
 * focus to interactive elements.
 *
 * --- COLOR & TYPOGRAPHY ---
 * - Palette: A deeply desaturated, dark background (`--background-color`)
 * serves as a canvas, allowing the vibrant rainbow accents to
 * stand out dramatically. Component backgrounds (`--component-bg`)
 * are semi-transparent and blurred to achieve the glass effect.
 * Text is rendered in a soft, off-white (`--text-color`) for
 * optimal readability against the dark, blurred backdrops.
 * - Typography: The 'Inter' font family is chosen for its clean,
 * neutral, and highly legible letterforms, which complement the
 * minimalist aesthetic. Font weights and sizes are used to
 * establish a clear visual hierarchy.
 *
 * --- MATERIALS & EFFECTS ---
 * - Glassmorphism: The "fluid material" effect is achieved using
 * the `backdrop-filter: blur()` property, combined with a
 * semi-transparent background and a delicate 1px border. This
 * creates the illusion of a frosted glass pane that distorts the
 * background behind it.
 * - Rainbow Accents: The signature "rainbow accent" is implemented
 * as an animated `box-shadow` on interactive elements like buttons.
 * A custom `@keyframes` animation (`rainbow-glow`) continuously
 * rotates the hue of the shadow, producing a mesmerizing, passive
 *_  aurora effect. This glow intensifies on hover, providing clear
 * visual feedback.
 *
 * --- ANIMATION & TRANSITION ---
 * All state changes (hover, active) are smoothed with a consistent
 * transition duration (`--transition-speed`) and an `ease-in-out`
 * timing function. This ensures all interactions feel fluid and
 * responsive, rather than abrupt. The primary passive animation is
 * the slow, continuous `rainbow-glow`, which makes the UI feel
 * alive even when idle.
 *
 */

/* --- Root Variables for Theming --- */
.page:root {
    --background-color: #121212;
    --component-bg: rgba(30, 30, 30, 0.65);
    --border-color: rgba(255, 255, 255, 0.1);
    --text-color: #e0e0e0;
    --text-color-dim: #a0a0a0;
    --accent-hue: 0; /* Starting hue for the animation */

    --primary-font:
        "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
        Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
        "Segoe UI Symbol";

    --border-radius-md: 12px;
    --border-radius-lg: 16px;
    --spacing-unit: 1rem;
    --transition-speed: 0.4s;
}

/* --- Global Styles & Background --- */
/*
  We apply a base style to the body to set the font and the dark background.
  A subtle radial gradient is added to the background to give it some depth
  and prevent it from being a flat, monotonous color.
*/
/* body {
    background-color: var(--background-color);
    background-image: radial-gradient(
        circle at center,
        rgba(255, 255, 255, 0.05) 0%,
        rgba(255, 255, 255, 0) 60%
    );
    color: var(--text-color);
    font-family: var(--primary-font);
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: var(--spacing-unit);
    overflow: hidden;
} */

/* --- Keyframe Animation for Rainbow Glow --- */
@keyframes rainbow-glow {
    0% {
        box-shadow:
            0 0 12px 2px hsla(0, 80%, 70%, 0.6),
            inset 0 0 4px 1px hsla(0, 80%, 70%, 0.2);
    }
    25% {
        box-shadow:
            0 0 12px 2px hsla(90, 80%, 70%, 0.6),
            inset 0 0 4px 1px hsla(90, 80%, 70%, 0.2);
    }
    50% {
        box-shadow:
            0 0 12px 2px hsla(180, 80%, 70%, 0.6),
            inset 0 0 4px 1px hsla(180, 80%, 70%, 0.2);
    }
    75% {
        box-shadow:
            0 0 12px 2px hsla(270, 80%, 70%, 0.6),
            inset 0 0 4px 1px hsla(270, 80%, 70%, 0.2);
    }
    100% {
        box-shadow:
            0 0 12px 2px hsla(360, 80%, 70%, 0.6),
            inset 0 0 4px 1px hsla(360, 80%, 70%, 0.2);
    }
}

/* --- Base Component Styles --- */
/*
  These are the base styles for the main container components.
  They establish the "glass" effect with a blurred backdrop,
  rounded corners, and a subtle border.
*/
.PromptInitialization,
.View,
.PromptAction,
.Turn {
    background-color: var(--component-bg);
    backdrop-filter: blur(12px) saturate(150%);
    -webkit-backdrop-filter: blur(12px) saturate(150%);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-lg);
    padding: calc(var(--spacing-unit) * 1);
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-unit);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    transition: all var(--transition-speed) ease-in-out;
}

.View {
    flex: 1 1 0;
    min-height: 0;
}

.PromptInitialization,
.Turn,
.PromptAction {
    flex: 1 1 auto;
}

/* --- Button Style --- */
/*
  The button is the primary interactive element. It features the animated
  rainbow glow. On hover, the background fills in, the glow intensifies,
  and the button scales up slightly for a satisfying tactile feel.
*/
.button {
    font-family: var(--primary-font);
    font-size: 1rem;
    font-weight: 500;
    color: var(--text-color);
    background-color: transparent;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-unit) calc(var(--spacing-unit) * 1.5);
    cursor: pointer;
    outline: none;
    position: relative;
    transition: all var(--transition-speed) ease-in-out;
    animation: rainbow-glow 8s linear infinite;
}

.button:hover,
.button:focus-visible {
    transform: scale(1.05) translateY(-2px);
    background-color: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.3);
    animation-play-state: paused; /* Pause animation to show a specific color on hover */
    box-shadow:
        0 0 20px 4px hsla(210, 90%, 70%, 0.8),
        inset 0 0 8px 2px hsla(210, 90%, 70%, 0.3);
}

.button:active {
    transform: scale(0.98);
}

/* --- PromptAction Container --- */
/* This container arranges multiple buttons in a row. */
.PromptAction {
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    gap: calc(var(--spacing-unit) * 1.5);
}

/* --- View Component for Displaying Data --- */
.View {
    text-align: center;
}

.name {
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--text-color-dim);
    text-transform: uppercase;
    letter-spacing: 1.5px;
    margin-bottom: calc(var(--spacing-unit) * 0.5);
}

.value {
    font-size: 2.5rem;
    font-weight: 700;
    line-height: 1.1;
    color: var(--text-color);
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.2);
}

/* --- Turn Component for Descriptions --- */
.Turn {
    text-align: center;
}

.description {
    font-size: 1rem;
    font-style: italic;
    color: var(--text-color-dim);
    line-height: 1.6;
}
